{"version":3,"file":"ldap.class.js","sourceRoot":"","sources":["../lib/ldap.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { LoggerService } from '@nestjs/common';\r\nimport { EventEmitter } from 'events';\r\nimport * as Ldap from 'ldapjs';\r\nimport type { LdapDomainsConfig, LoggerContext } from './ldap.interface';\r\nimport {\r\n    ldapADattributes,\r\n    LdapResponseObject,\r\n    LdapResponseGroup,\r\n    LdapResponseUser,\r\n    LdapAddEntry,\r\n} from './ldap.interface';\r\nimport { Change } from './ldap/change';\r\n\r\nexport class LdapDomain extends EventEmitter {\r\n    public domainName: string;\r\n    public hideSynchronization: boolean;\r\n\r\n    private clientOpts: Ldap.ClientOptions;\r\n\r\n    private bindDN: string;\r\n\r\n    private bindCredentials: string;\r\n\r\n    private adminClient: Ldap.Client;\r\n\r\n    private adminBound: boolean;\r\n\r\n    private userClient: Ldap.Client;\r\n\r\n    private getGroups: ({\r\n        user,\r\n        loggerContext,\r\n    }: {\r\n        user: LdapResponseUser;\r\n        loggerContext?: LoggerContext;\r\n    }) => Promise<LdapResponseGroup[]>;\r\n\r\n    /**\r\n     * Create an LDAP class.\r\n     *\r\n     * @param {LdapModuleOptions} opts Config options\r\n     * @param {LogService} logger Logger service\r\n     * @param {ConfigService} configService Config service\r\n     * @constructor\r\n     */\r\n    constructor(\r\n        private readonly options: LdapDomainsConfig,\r\n        private readonly logger: LoggerService,\r\n    ) {\r\n        super();\r\n\r\n        this.domainName = options.name;\r\n        this.hideSynchronization = options.hideSynchronization ?? false;\r\n\r\n        this.clientOpts = {\r\n            url: options.url,\r\n            tlsOptions: options.tlsOptions,\r\n            socketPath: options.socketPath,\r\n            log: options.log,\r\n            timeout: options.timeout || 5000,\r\n            connectTimeout: options.connectTimeout || 5000,\r\n            idleTimeout: options.idleTimeout || 5000,\r\n            reconnect: options.reconnect || true,\r\n            strictDN: options.strictDN,\r\n            queueSize: options.queueSize || 200,\r\n            queueTimeout: options.queueTimeout || 5000,\r\n            queueDisable: options.queueDisable || false,\r\n        };\r\n\r\n        this.bindDN = options.bindDN;\r\n        this.bindCredentials = options.bindCredentials;\r\n\r\n        this.adminClient = Ldap.createClient(this.clientOpts);\r\n        this.adminBound = false;\r\n        this.userClient = Ldap.createClient(this.clientOpts);\r\n\r\n        this.adminClient.on('connectError', this.handleConnectError.bind(this));\r\n        this.userClient.on('connectError', this.handleConnectError.bind(this));\r\n\r\n        this.adminClient.on('error', this.handleErrorAdmin.bind(this));\r\n        this.userClient.on('error', this.handleErrorUser.bind(this));\r\n\r\n        if (options.reconnect) {\r\n            this.once('installReconnectListener', () => {\r\n                this.logger.debug!({\r\n                    message: `${options.name}: install reconnect listener`,\r\n                    context: LdapDomain.name,\r\n                    function: 'constructor',\r\n                });\r\n                this.adminClient.on('connect', () => this.onConnectAdmin({}));\r\n            });\r\n        }\r\n\r\n        this.adminClient.on('connectTimeout', this.handleErrorAdmin.bind(this));\r\n        this.userClient.on('connectTimeout', this.handleErrorUser.bind(this));\r\n\r\n        if (options.groupSearchBase && options.groupSearchFilter) {\r\n            if (typeof options.groupSearchFilter === 'string') {\r\n                const { groupSearchFilter } = options;\r\n                // eslint-disable-next-line no-param-reassign\r\n                options.groupSearchFilter = (user: LdapResponseUser): string =>\r\n                    groupSearchFilter\r\n                        .replace(\r\n                            /{{dn}}/g,\r\n                            (\r\n                                options.groupDnProperty &&\r\n                                (user[options.groupDnProperty] as string)\r\n                            )\r\n                                ?.replace(/\\(/, '\\\\(')\r\n                                ?.replace(/\\)/, '\\\\)') || 'undefined',\r\n                        )\r\n                        .replace(/{{username}}/g, user.sAMAccountName);\r\n            }\r\n\r\n            this.getGroups = this.findGroups;\r\n        } else {\r\n            // Assign an async identity function so there is no need to branch\r\n            // the authenticate function to have cache set up.\r\n            this.getGroups = async () => [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Format a GUID\r\n     *\r\n     * @public\r\n     * @param {string} objectGUID GUID in Active Directory notation\r\n     * @returns {string} string GUID\r\n     */\r\n    GUIDtoString = (objectGUID: string): string =>\r\n        (objectGUID &&\r\n            Buffer.from(objectGUID, 'base64')\r\n                .toString('hex')\r\n                .replace(\r\n                    /^(..)(..)(..)(..)(..)(..)(..)(..)(..)(..)(..)(..)(..)(..)(..)(..)$/,\r\n                    '$4$3$2$1-$6$5-$8$7-$10$9-$16$15$14$13$12$11',\r\n                )\r\n                .toUpperCase()) ||\r\n        '';\r\n\r\n    /**\r\n   * Ldap Date\r\n\r\n   * @param {string} string\r\n   */\r\n    dateFromString = (string: string): Date | null => {\r\n        const b = string.match(/\\d\\d/g);\r\n\r\n        return (\r\n            b &&\r\n            new Date(\r\n                Date.UTC(\r\n                    Number.parseInt(b[0] + b[1], 10),\r\n                    Number.parseInt(b[2], 10) - 1,\r\n                    Number.parseInt(b[3], 10),\r\n                    Number.parseInt(b[4], 10),\r\n                    Number.parseInt(b[5], 10),\r\n                    Number.parseInt(b[6], 10),\r\n                ),\r\n            )\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Mark admin client unbound so reconnect works as expected and re-emit the error\r\n     *\r\n     * @private\r\n     * @param {Ldap.Error} error The error to be logged and emitted\r\n     * @returns {void}\r\n     */\r\n    private handleErrorAdmin(error: Ldap.Error): void {\r\n        if (`${error.code}` !== 'ECONNRESET') {\r\n            this.logger.error({\r\n                message: `${this.domainName}: admin emitted error: [${error.code}]`,\r\n                error,\r\n                context: LdapDomain.name,\r\n                function: 'handleErrorAdmin',\r\n            });\r\n        }\r\n        this.adminBound = false;\r\n    }\r\n\r\n    /**\r\n     * Mark user client unbound so reconnect works as expected and re-emit the error\r\n     *\r\n     * @private\r\n     * @param {Ldap.Error} error The error to be logged and emitted\r\n     * @returns {void}\r\n     */\r\n    private handleErrorUser(error: Ldap.Error): void {\r\n        if (`${error.code}` !== 'ECONNRESET') {\r\n            this.logger.error({\r\n                message: `${this.domainName}: user emitted error: [${error.code}]`,\r\n                error,\r\n                context: LdapDomain.name,\r\n                function: 'handleErrorUser',\r\n            });\r\n        }\r\n        // this.adminBound = false;\r\n    }\r\n\r\n    /**\r\n     * Connect error handler\r\n     *\r\n     * @private\r\n     * @param {Ldap.Error} error The error to be logged and emitted\r\n     * @returns {void}\r\n     */\r\n    private handleConnectError(error: Ldap.Error): void {\r\n        this.logger.error({\r\n            message: `${this.domainName}: emitted error: [${error.code}]`,\r\n            error,\r\n            context: LdapDomain.name,\r\n            function: 'handleConnectError',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Bind adminClient to the admin user on connect\r\n     *\r\n     * @private\r\n     * @async\r\n     * @returns {boolean | Error}\r\n     */\r\n    private async onConnectAdmin({\r\n        loggerContext,\r\n    }: {\r\n        loggerContext?: LoggerContext;\r\n    }): Promise<boolean> {\r\n        // Anonymous binding\r\n        if (typeof this.bindDN === 'undefined' || this.bindDN === null) {\r\n            this.adminBound = false;\r\n\r\n            throw new Error(`${this.domainName}: bindDN is undefined`);\r\n        }\r\n\r\n        return new Promise<boolean>((resolve, reject) =>\r\n            this.adminClient.bind(\r\n                this.bindDN,\r\n                this.bindCredentials,\r\n                (error) => {\r\n                    if (error) {\r\n                        this.logger.error({\r\n                            message: `${\r\n                                this.domainName\r\n                            }: bind error: ${error.toString()}`,\r\n                            error,\r\n                            context: LdapDomain.name,\r\n                            function: 'onConnectAdmin',\r\n                            ...loggerContext,\r\n                        });\r\n                        this.adminBound = false;\r\n\r\n                        return reject(error);\r\n                    }\r\n\r\n                    this.adminBound = true;\r\n                    if (this.options.reconnect) {\r\n                        this.emit('installReconnectListener');\r\n                    }\r\n\r\n                    return resolve(true);\r\n                },\r\n            ),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Ensure that `this.adminClient` is bound.\r\n     *\r\n     * @private\r\n     * @async\r\n     * @returns {boolean | Error}\r\n     */\r\n    private adminBind = async ({\r\n        loggerContext,\r\n    }: {\r\n        loggerContext?: LoggerContext;\r\n    }): Promise<boolean> =>\r\n        this.adminBound ? true : this.onConnectAdmin({ loggerContext });\r\n\r\n    /**\r\n     * Conduct a search using the admin client. Used for fetching both\r\n     * user and group information.\r\n     *\r\n     * @private\r\n     * @async\r\n     * @param {string} searchBase LDAP search base\r\n     * @param {Object} options LDAP search options\r\n     * @param {string} options.filter LDAP search filter\r\n     * @param {string} options.scope LDAP search scope\r\n     * @param {(string[]|undefined)} options.attributes Attributes to fetch\r\n     * @returns {undefined | Ldap.SearchEntryObject[]}\r\n     * @throws {Error}\r\n     */\r\n    private async search({\r\n        searchBase,\r\n        options,\r\n        loggerContext,\r\n    }: {\r\n        searchBase: string;\r\n        options: Ldap.SearchOptions;\r\n        loggerContext?: LoggerContext;\r\n    }): Promise<LdapResponseObject[]> {\r\n        return this.adminBind({ loggerContext }).then(\r\n            () =>\r\n                new Promise<LdapResponseObject[]>((resolve, reject) =>\r\n                    this.adminClient.search(\r\n                        searchBase,\r\n                        options,\r\n                        (\r\n                            searchError: Ldap.Error | null,\r\n                            searchResult: Ldap.SearchCallbackResponse,\r\n                        ) => {\r\n                            if (searchError !== null) {\r\n                                return reject(searchError);\r\n                            }\r\n                            if (typeof searchResult !== 'object') {\r\n                                return reject(\r\n                                    new Error(\r\n                                        `The LDAP server has empty search: ${searchBase}, options=${JSON.stringify(\r\n                                            options,\r\n                                        )}`,\r\n                                    ),\r\n                                );\r\n                            }\r\n\r\n                            const items: LdapResponseObject[] = [];\r\n                            searchResult.on(\r\n                                'searchEntry',\r\n                                (entry: Ldap.SearchEntry) => {\r\n                                    const object = Object.keys(\r\n                                        entry.object,\r\n                                    ).reduce((accumulator, key) => {\r\n                                        let k = key;\r\n                                        if (key.endsWith(';binary')) {\r\n                                            k = key.replace(/;binary$/, '');\r\n                                        }\r\n                                        switch (k) {\r\n                                            case 'objectGUID':\r\n                                                return {\r\n                                                    ...accumulator,\r\n                                                    objectGUID:\r\n                                                        this.GUIDtoString(\r\n                                                            entry.object[\r\n                                                                key\r\n                                                            ] as string,\r\n                                                        ),\r\n                                                } as LdapResponseObject;\r\n                                            case 'dn':\r\n                                                return {\r\n                                                    ...accumulator,\r\n                                                    dn: (\r\n                                                        entry.object[\r\n                                                            key\r\n                                                        ] as string\r\n                                                    ).toLowerCase(),\r\n                                                } as LdapResponseObject;\r\n                                            case 'sAMAccountName':\r\n                                                return {\r\n                                                    ...accumulator,\r\n                                                    sAMAccountName: (\r\n                                                        entry.object[\r\n                                                            key\r\n                                                        ] as string\r\n                                                    ).toLowerCase(),\r\n                                                } as LdapResponseObject;\r\n                                            case 'whenCreated':\r\n                                            case 'whenChanged':\r\n                                                return {\r\n                                                    ...accumulator,\r\n                                                    [k]: this.dateFromString(\r\n                                                        entry.object[\r\n                                                            key\r\n                                                        ] as string,\r\n                                                    ),\r\n                                                } as LdapResponseObject;\r\n                                            default:\r\n                                        }\r\n\r\n                                        // 'thumbnailPhoto' and 'jpegPhoto' is falling there\r\n                                        return {\r\n                                            ...accumulator,\r\n                                            [k]: entry.object[key],\r\n                                        } as LdapResponseObject;\r\n                                    }, {} as LdapResponseObject);\r\n\r\n                                    items.push({\r\n                                        ...object,\r\n                                        loginDomain: this.domainName,\r\n                                    } as LdapResponseObject);\r\n\r\n                                    // if (this.options.includeRaw === true) {\r\n                                    //   items[items.length - 1].raw = (entry.raw as unknown) as string;\r\n                                    // }\r\n                                },\r\n                            );\r\n\r\n                            searchResult.on('error', (error: Ldap.Error) => {\r\n                                reject(error);\r\n                            });\r\n\r\n                            searchResult.on(\r\n                                'end',\r\n                                (result: Ldap.LDAPResult) => {\r\n                                    if (result.status !== 0) {\r\n                                        return reject(\r\n                                            new Error(\r\n                                                `non-zero status from LDAP search: ${result.status}`,\r\n                                            ),\r\n                                        );\r\n                                    }\r\n\r\n                                    return resolve(items);\r\n                                },\r\n                            );\r\n\r\n                            return undefined;\r\n                        },\r\n                    ),\r\n                ),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sanitize LDAP special characters from input\r\n     *\r\n     * {@link https://tools.ietf.org/search/rfc4515#section-3}\r\n     *\r\n     * @private\r\n     * @param {string} input String to sanitize\r\n     * @returns {string} Sanitized string\r\n     */\r\n    private sanitizeInput(input: string): string {\r\n        return input\r\n            .replace(/\\*/g, '\\\\2a')\r\n            .replace(/\\(/g, '\\\\28')\r\n            .replace(/\\)/g, '\\\\29')\r\n            .replace(/\\\\/g, '\\\\5c')\r\n            .replace(/\\0/g, '\\\\00')\r\n            .replace(/\\//g, '\\\\2f');\r\n    }\r\n\r\n    /**\r\n     * Find the user record for the given username.\r\n     *\r\n     * @private\r\n     * @async\r\n     * @param {string} username Username to search for\r\n     * @returns {undefined} If user is not found but no error happened, result is undefined.\r\n     * @throws {Error}\r\n     */\r\n    private async findUser({\r\n        username,\r\n        loggerContext,\r\n    }: {\r\n        username: string;\r\n        loggerContext?: LoggerContext;\r\n    }): Promise<LdapResponseUser> {\r\n        if (!username) {\r\n            throw new Error('empty username');\r\n        }\r\n\r\n        const searchFilter = this.options.searchFilter.replace(\r\n            /{{username}}/g,\r\n            this.sanitizeInput(username),\r\n        );\r\n        const options: Ldap.SearchOptions = {\r\n            filter: searchFilter,\r\n            scope: this.options.searchScope,\r\n            attributes: ldapADattributes,\r\n            timeLimit: this.options.timeLimit || 10,\r\n            sizeLimit: this.options.sizeLimit || 0,\r\n            paged: false,\r\n        };\r\n        if (this.options.searchAttributes) {\r\n            options.attributes = this.options.searchAttributes;\r\n        }\r\n\r\n        return this.search({\r\n            searchBase: this.options.searchBase,\r\n            options,\r\n            loggerContext,\r\n        })\r\n            .then(\r\n                (result) =>\r\n                    new Promise<LdapResponseUser>((resolve, reject) => {\r\n                        if (!result) {\r\n                            return reject(new Ldap.NoSuchObjectError());\r\n                        }\r\n\r\n                        switch (result.length) {\r\n                            case 0:\r\n                                return reject(new Ldap.NoSuchObjectError());\r\n                            case 1:\r\n                                return resolve(result[0] as LdapResponseUser);\r\n                            default:\r\n                                return reject(\r\n                                    new Error(\r\n                                        `unexpected number of matches (${result.length}) for \"${username}\" username`,\r\n                                    ),\r\n                                );\r\n                        }\r\n                    }),\r\n            )\r\n            .catch((error: Error) => {\r\n                this.logger.error({\r\n                    message: `${\r\n                        this.domainName\r\n                    }: user search error: ${error.toString()}`,\r\n                    error,\r\n                    context: LdapDomain.name,\r\n                    function: 'findUser',\r\n                    ...loggerContext,\r\n                });\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Find groups for given user\r\n     *\r\n     * @private\r\n     * @param {Ldap.SearchEntryObject} user The LDAP user object\r\n     * @returns {Promise<Ldap.SearchEntryObject>} Result handling callback\r\n     */\r\n    private async findGroups({\r\n        user,\r\n        loggerContext,\r\n    }: {\r\n        user: LdapResponseUser;\r\n        loggerContext?: LoggerContext;\r\n    }): Promise<LdapResponseGroup[]> {\r\n        if (!user) {\r\n            throw new Error('no user');\r\n        }\r\n\r\n        const searchFilter =\r\n            typeof this.options.groupSearchFilter === 'function'\r\n                ? this.options.groupSearchFilter(user)\r\n                : undefined;\r\n\r\n        const options: Ldap.SearchOptions = {\r\n            filter: searchFilter,\r\n            scope: this.options.groupSearchScope,\r\n            timeLimit: this.options.timeLimit || 10,\r\n            sizeLimit: this.options.sizeLimit || 0,\r\n            paged: false,\r\n        };\r\n        if (this.options.groupSearchAttributes) {\r\n            options.attributes = this.options.groupSearchAttributes;\r\n        } else {\r\n            options.attributes = ldapADattributes;\r\n        }\r\n\r\n        return this.search({\r\n            searchBase: this.options.groupSearchBase || this.options.searchBase,\r\n            options,\r\n            loggerContext,\r\n        }).catch((error: Error) => {\r\n            this.logger.error({\r\n                message: `${\r\n                    this.domainName\r\n                }: group search error: ${error.toString()}`,\r\n                error,\r\n                context: LdapDomain.name,\r\n                function: 'findGroups',\r\n                ...loggerContext,\r\n            });\r\n\r\n            return [];\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Search user by Username\r\n     *\r\n     * @async\r\n     * @param {string} userByUsername user name\r\n     * @returns {Promise<LdapResponseUser>} User in LDAP\r\n     */\r\n    public async searchByUsername({\r\n        username,\r\n        loggerContext,\r\n    }: {\r\n        username: string;\r\n        loggerContext?: LoggerContext;\r\n    }): Promise<LdapResponseUser | undefined> {\r\n        return this.findUser({ username, loggerContext }).catch(\r\n            (error: Error) => {\r\n                this.logger.error({\r\n                    message: `${\r\n                        this.domainName\r\n                    }: Search by Username error: ${error.toString()}`,\r\n                    error,\r\n                    context: LdapDomain.name,\r\n                    function: 'searchByUsername',\r\n                    ...loggerContext,\r\n                });\r\n\r\n                throw error;\r\n            },\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Search user by DN\r\n     *\r\n     * @async\r\n     * @param {string} userByDN user distinguished name\r\n     * @returns {Promise<LdapResponseUser>} User in LDAP\r\n     */\r\n    public async searchByDN({\r\n        dn,\r\n        loggerContext,\r\n    }: {\r\n        dn: string;\r\n        loggerContext?: LoggerContext;\r\n    }): Promise<LdapResponseUser> {\r\n        const options: Ldap.SearchOptions = {\r\n            scope: this.options.searchScope,\r\n            attributes: ['*'],\r\n            timeLimit: this.options.timeLimit || 10,\r\n            sizeLimit: this.options.sizeLimit || 0,\r\n            paged: false,\r\n        };\r\n        if (this.options.searchAttributes) {\r\n            options.attributes = this.options.searchAttributes;\r\n        }\r\n\r\n        return this.search({ searchBase: dn, options, loggerContext })\r\n            .then(\r\n                (result) =>\r\n                    new Promise<LdapResponseUser>((resolve, reject) => {\r\n                        if (!result) {\r\n                            return reject(new Error('No result from search'));\r\n                        }\r\n\r\n                        switch (result.length) {\r\n                            case 0:\r\n                                return reject(new Ldap.NoSuchObjectError());\r\n                            case 1:\r\n                                return resolve(result[0] as LdapResponseUser);\r\n                            default:\r\n                                return reject(\r\n                                    new Error(\r\n                                        `unexpected number of matches (${result.length}) for \"${dn}\" user DN`,\r\n                                    ),\r\n                                );\r\n                        }\r\n                    }),\r\n            )\r\n            .catch((error: Error | Ldap.NoSuchObjectError) => {\r\n                if (error instanceof Ldap.NoSuchObjectError) {\r\n                    throw error;\r\n                } else {\r\n                    this.logger.error({\r\n                        message: `${\r\n                            this.domainName\r\n                        }: Search by DN error: ${error.toString()}`,\r\n                        error,\r\n                        context: LdapDomain.name,\r\n                        function: 'searchByDN',\r\n                        ...loggerContext,\r\n                    });\r\n                    throw error;\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Synchronize users\r\n     *\r\n     * @async\r\n     * @returns {Record<string, LdapResponseUser[]>} User in LDAP\r\n     * @throws {Error}\r\n     */\r\n    public async synchronization({\r\n        loggerContext,\r\n    }: {\r\n        loggerContext?: LoggerContext;\r\n    }): Promise<Record<string, Error | LdapResponseUser[]>> {\r\n        if (this.hideSynchronization) {\r\n            return {};\r\n        }\r\n\r\n        const options: Ldap.SearchOptions = {\r\n            filter: this.options.searchFilterAllUsers,\r\n            scope: this.options.searchScopeAllUsers,\r\n            attributes: ldapADattributes,\r\n            timeLimit: this.options.timeLimit || 10,\r\n            sizeLimit: this.options.sizeLimit || 0,\r\n            paged: true,\r\n        };\r\n        if (this.options.searchAttributesAllUsers) {\r\n            options.attributes = this.options.searchAttributesAllUsers;\r\n        }\r\n\r\n        return this.search({\r\n            searchBase: this.options.searchBase,\r\n            options,\r\n            loggerContext,\r\n        })\r\n            .then(async (sync) => {\r\n                if (sync) {\r\n                    const usersWithGroups = await Promise.all(\r\n                        sync.map(async (user) => ({\r\n                            ...user,\r\n                            groups: await this.getGroups({\r\n                                user: user as LdapResponseUser,\r\n                                loggerContext,\r\n                            }),\r\n                        })),\r\n                    );\r\n\r\n                    return {\r\n                        [this.domainName]:\r\n                            usersWithGroups as LdapResponseUser[],\r\n                    };\r\n                }\r\n\r\n                this.logger.error({\r\n                    message: `${this.domainName}: Synchronize unknown error`,\r\n                    error: 'Unknown',\r\n                    context: LdapDomain.name,\r\n                    function: 'synchronization',\r\n                    ...loggerContext,\r\n                });\r\n\r\n                return {\r\n                    [this.domainName]: new Error(\r\n                        `${this.domainName}: Synchronize unknown error`,\r\n                    ),\r\n                };\r\n            })\r\n            .catch((error: Error | Ldap.Error) => {\r\n                this.logger.error({\r\n                    message: `${\r\n                        this.domainName\r\n                    }: Synchronize error: ${error.toString()}`,\r\n                    error,\r\n                    context: LdapDomain.name,\r\n                    function: 'synchronization',\r\n                    ...loggerContext,\r\n                });\r\n\r\n                return { [this.domainName]: error };\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Synchronize groups\r\n     *\r\n     * @async\r\n     * @returns {Record<string, LdapResponseGroup[]>} Group in LDAP\r\n     * @throws {Error}\r\n     */\r\n    public async synchronizationGroups({\r\n        loggerContext,\r\n    }: {\r\n        loggerContext?: LoggerContext;\r\n    }): Promise<Record<string, Error | LdapResponseGroup[]>> {\r\n        const options: Ldap.SearchOptions = {\r\n            filter: this.options.searchFilterAllGroups,\r\n            scope: this.options.groupSearchScope,\r\n            attributes: ldapADattributes,\r\n            timeLimit: this.options.timeLimit || 10,\r\n            sizeLimit: this.options.sizeLimit || 0,\r\n            paged: true,\r\n        };\r\n        if (this.options.groupSearchAttributes) {\r\n            options.attributes = this.options.groupSearchAttributes;\r\n        }\r\n\r\n        return this.search({\r\n            searchBase: this.options.searchBase,\r\n            options,\r\n            loggerContext,\r\n        })\r\n            .then((sync) => {\r\n                if (sync) {\r\n                    return { [this.domainName]: sync as LdapResponseGroup[] };\r\n                }\r\n\r\n                this.logger.error({\r\n                    message: `${this.domainName}: Synchronization groups: unknown error`,\r\n                    error: 'Unknown',\r\n                    context: LdapDomain.name,\r\n                    function: 'synchronizationGroups',\r\n                    ...loggerContext,\r\n                });\r\n\r\n                return {\r\n                    [this.domainName]: new Error(\r\n                        `${this.domainName}: Synchronization groups: unknown error`,\r\n                    ),\r\n                };\r\n            })\r\n            .catch((error: Error) => {\r\n                this.logger.error({\r\n                    message: `${\r\n                        this.domainName\r\n                    }: Synchronization groups: ${error.toString()}`,\r\n                    error,\r\n                    context: LdapDomain.name,\r\n                    function: 'synchronizationGroups',\r\n                    ...loggerContext,\r\n                });\r\n\r\n                return { [this.domainName]: error };\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Modify using the admin client.\r\n     *\r\n     * @public\r\n     * @async\r\n     * @param {string} dn LDAP Distiguished Name\r\n     * @param {Change[]} data LDAP modify data\r\n     * @param {string} username The optional parameter\r\n     * @param {string} password The optional parameter\r\n     * @returns {boolean} The result\r\n     * @throws {Ldap.Error}\r\n     */\r\n    public async modify({\r\n        dn,\r\n        data,\r\n        username,\r\n        password,\r\n        loggerContext,\r\n    }: {\r\n        dn: string;\r\n        data: Change[];\r\n        username?: string;\r\n        password?: string;\r\n        loggerContext?: LoggerContext;\r\n    }): Promise<boolean> {\r\n        return this.adminBind({ loggerContext }).then(\r\n            () =>\r\n                new Promise<boolean>((resolve, reject) => {\r\n                    if (password) {\r\n                        // If a password, then we try to connect with user's login and password, and try to modify\r\n                        this.userClient.bind(dn, password, (error): any => {\r\n                            data.forEach((d, i, a) => {\r\n                                if (\r\n                                    d.modification.type === 'thumbnailPhoto' ||\r\n                                    d.modification.type === 'jpegPhoto'\r\n                                ) {\r\n                                    // eslint-disable-next-line no-param-reassign\r\n                                    a[i].modification.vals = '...skipped...';\r\n                                }\r\n                            });\r\n\r\n                            if (error) {\r\n                                this.logger.error({\r\n                                    message: `${\r\n                                        this.domainName\r\n                                    }: bind error: ${error.toString()}`,\r\n                                    error,\r\n                                    context: LdapDomain.name,\r\n                                    function: 'modify',\r\n                                    ...loggerContext,\r\n                                });\r\n\r\n                                return reject(error);\r\n                            }\r\n\r\n                            return this.userClient.modify(\r\n                                dn,\r\n                                data,\r\n                                async (\r\n                                    searchError: Ldap.Error | null,\r\n                                ): Promise<void> => {\r\n                                    if (searchError) {\r\n                                        this.logger.error({\r\n                                            message: `${\r\n                                                this.domainName\r\n                                            }: Modify error \"${dn}\": ${searchError.toString()}`,\r\n                                            error: searchError,\r\n                                            context: LdapDomain.name,\r\n                                            function: 'modify',\r\n                                            ...loggerContext,\r\n                                        });\r\n\r\n                                        reject(searchError);\r\n                                    }\r\n\r\n                                    this.logger.debug!({\r\n                                        message: `${this.domainName}: Modify success \"${dn}\"`,\r\n                                        context: LdapDomain.name,\r\n                                        function: 'modify',\r\n                                        ...loggerContext,\r\n                                    });\r\n\r\n                                    resolve(true);\r\n                                },\r\n                            );\r\n                        });\r\n                    } else {\r\n                        this.adminClient.modify(\r\n                            dn,\r\n                            data,\r\n                            async (\r\n                                searchError: Ldap.Error | null,\r\n                            ): Promise<void> => {\r\n                                data.forEach((d, i, a) => {\r\n                                    if (\r\n                                        d.modification.type ===\r\n                                            'thumbnailPhoto' ||\r\n                                        d.modification.type === 'jpegPhoto'\r\n                                    ) {\r\n                                        // eslint-disable-next-line no-param-reassign\r\n                                        a[i].modification.vals =\r\n                                            '...skipped...';\r\n                                    }\r\n                                });\r\n\r\n                                if (searchError) {\r\n                                    this.logger.error({\r\n                                        message: `${\r\n                                            this.domainName\r\n                                        }: Modify error \"${dn}\": ${searchError.toString()}`,\r\n                                        error: searchError,\r\n                                        context: LdapDomain.name,\r\n                                        function: 'modify',\r\n                                        ...loggerContext,\r\n                                    });\r\n\r\n                                    reject(searchError);\r\n                                    return;\r\n                                }\r\n\r\n                                this.logger.debug!({\r\n                                    message: `${\r\n                                        this.domainName\r\n                                    }: Modify success \"${dn}\": ${JSON.stringify(\r\n                                        data,\r\n                                    )}`,\r\n                                    context: LdapDomain.name,\r\n                                    function: 'modify',\r\n                                    ...loggerContext,\r\n                                });\r\n\r\n                                resolve(true);\r\n                            },\r\n                        );\r\n                    }\r\n                }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Authenticate given credentials against LDAP server (Internal)\r\n     *\r\n     * @async\r\n     * @param {string} username The username to authenticate\r\n     * @param {string} password The password to verify\r\n     * @returns {LdapResponseUser} User in LDAP\r\n     * @throws {Error}\r\n     */\r\n    public async authenticate({\r\n        username,\r\n        password,\r\n        loggerContext,\r\n    }: {\r\n        username: string;\r\n        password: string;\r\n        loggerContext?: LoggerContext;\r\n    }): Promise<LdapResponseUser> {\r\n        if (!password) {\r\n            this.logger.error({\r\n                message: `${this.domainName}: No password given`,\r\n                error: 'No password given',\r\n                context: LdapDomain.name,\r\n                function: 'authenticate',\r\n                ...loggerContext,\r\n            });\r\n            throw new Error(`${this.domainName}: No password given`);\r\n        }\r\n\r\n        try {\r\n            // 1. Find the user DN in question.\r\n            const foundUser = await this.findUser({\r\n                username,\r\n                loggerContext,\r\n            }).catch((error: Error) => {\r\n                this.logger.error({\r\n                    message: `${this.domainName}: Not found user: \"${username}\"`,\r\n                    error,\r\n                    context: LdapDomain.name,\r\n                    function: 'authenticate',\r\n                    ...loggerContext,\r\n                });\r\n\r\n                throw error;\r\n            });\r\n            if (!foundUser) {\r\n                this.logger.error({\r\n                    message: `${this.domainName}: Not found user: \"${username}\"`,\r\n                    error: 'Not found user',\r\n                    context: LdapDomain.name,\r\n                    function: 'authenticate',\r\n                    ...loggerContext,\r\n                });\r\n\r\n                throw new Error(`Not found user: \"${username}\"`);\r\n            }\r\n\r\n            // 2. Attempt to bind as that user to check password.\r\n            return new Promise<LdapResponseUser>((resolve, reject) => {\r\n                this.userClient.bind(\r\n                    foundUser[this.options.bindProperty || 'dn'],\r\n                    password,\r\n                    async (bindError): Promise<unknown | LdapResponseUser> => {\r\n                        if (bindError) {\r\n                            this.logger.error({\r\n                                message: `${\r\n                                    this.domainName\r\n                                }: bind error: ${bindError.toString()}`,\r\n                                error: bindError,\r\n                                context: LdapDomain.name,\r\n                                function: 'authenticate',\r\n                                ...loggerContext,\r\n                            });\r\n\r\n                            return reject(bindError);\r\n                        }\r\n\r\n                        // 3. If requested, fetch user groups\r\n                        try {\r\n                            foundUser.groups = await this.getGroups({\r\n                                user: foundUser,\r\n                                loggerContext,\r\n                            });\r\n\r\n                            return resolve(foundUser);\r\n                        } catch (error: unknown) {\r\n                            const errorMessage =\r\n                                error instanceof Error\r\n                                    ? error.toString()\r\n                                    : JSON.stringify(error);\r\n                            this.logger.error({\r\n                                message: `${this.domainName}: Authenticate error: ${errorMessage}`,\r\n                                error,\r\n                                context: LdapDomain.name,\r\n                                function: 'authenticate',\r\n                                ...loggerContext,\r\n                            });\r\n\r\n                            return reject(error);\r\n                        }\r\n                    },\r\n                );\r\n            });\r\n        } catch (error: unknown) {\r\n            const errorMessage =\r\n                error instanceof Error\r\n                    ? error.toString()\r\n                    : JSON.stringify(error);\r\n            this.logger.error({\r\n                message: `${this.domainName}: LDAP auth error: ${errorMessage}`,\r\n                error,\r\n                context: LdapDomain.name,\r\n                function: 'authenticate',\r\n                ...loggerContext,\r\n            });\r\n\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trusted domain\r\n     *\r\n     * @async\r\n     * @returns {LdapTrustedDomain} ?\r\n     * @throws {Error}\r\n     */\r\n    public async trustedDomain({\r\n        searchBase,\r\n        loggerContext,\r\n    }: {\r\n        searchBase: string;\r\n        loggerContext?: LoggerContext;\r\n    }): Promise<any> {\r\n        const options: Ldap.SearchOptions = {\r\n            filter: '(&(objectClass=trustedDomain))',\r\n            scope: this.options.searchScope,\r\n            attributes: ldapADattributes,\r\n            timeLimit: this.options.timeLimit || 10,\r\n            sizeLimit: this.options.sizeLimit || 0,\r\n            paged: false,\r\n        };\r\n\r\n        const trustedDomain = await this.search({\r\n            searchBase,\r\n            options,\r\n            loggerContext,\r\n        });\r\n\r\n        return trustedDomain;\r\n    }\r\n\r\n    /**\r\n     * This is add a LDAP object\r\n     *\r\n     * @async\r\n     * @param {Record<string, string>} value\r\n     * @returns {LdapResponseUser} User | Profile in LDAP\r\n     * @throws {Error}\r\n     */\r\n    public async add({\r\n        entry,\r\n        loggerContext,\r\n    }: {\r\n        entry: LdapAddEntry;\r\n        loggerContext?: LoggerContext;\r\n    }): Promise<LdapResponseUser> {\r\n        return this.adminBind({ loggerContext }).then(\r\n            () =>\r\n                new Promise<LdapResponseUser>((resolve, reject) => {\r\n                    if (!this.options.newObject) {\r\n                        throw new Error('ADD operation not available');\r\n                    }\r\n\r\n                    const dn = `uid=${this.sanitizeInput(\r\n                        entry.uid as string,\r\n                    )},${this.sanitizeInput(this.options.newObject)}`;\r\n                    this.adminClient.add(dn, entry, (error: Error) => {\r\n                        if (error) {\r\n                            return reject(error);\r\n                        }\r\n\r\n                        return resolve(this.searchByDN({ dn, loggerContext }));\r\n                    });\r\n                }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Unbind connections\r\n     *\r\n     * @async\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    public async close(): Promise<boolean> {\r\n        // It seems to be OK just to call unbind regardless of if the\r\n        // client has been bound (e.g. how ldapjs pool destroy does)\r\n        return new Promise<boolean>((resolve) => {\r\n            this.adminClient.unbind(() => {\r\n                this.logger.debug!({\r\n                    message: `${this.domainName}: adminClient: close`,\r\n                    context: LdapDomain.name,\r\n                    function: 'close',\r\n                });\r\n\r\n                this.userClient.unbind(() => {\r\n                    this.logger.debug!({\r\n                        message: `${this.domainName}: userClient: close`,\r\n                        context: LdapDomain.name,\r\n                        function: 'close',\r\n                    });\r\n\r\n                    resolve(true);\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n"]}