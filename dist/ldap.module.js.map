{"version":3,"file":"ldap.module.js","sourceRoot":"","sources":["../lib/ldap.module.ts"],"names":[],"mappings":";;;;;;;;;;AACA,2CAA+E;AAG/E,iDAA6C;AAC7C,qDAQ0B;AAS1B,IAAa,UAAU,kBAAvB,MAAa,UAAU;IACnB,MAAM,CAAC,kBAAkB,CAAC,MAOzB;QACG,OAAO;YACH,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,GAAG,EAAE,MAAM,CAAC,GAAG;YACf,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,eAAe,EAAE,MAAM,CAAC,eAAe;YACvC,UAAU,EAAE,MAAM,CAAC,MAAM;YACzB,SAAS,EAAE,MAAM,CAAC,MAAM;YACxB,YAAY,EACR,sGAAsG;YAC1G,WAAW,EAAE,KAAc;YAC3B,eAAe,EAAE,MAAM,CAAC,MAAM;YAC9B,iBAAiB,EACb,uCAAuC;YAC3C,gBAAgB,EAAE,KAAc;YAChC,eAAe,EAAE,IAAI;YACrB,mBAAmB,EAAE,KAAK;YAC1B,oBAAoB,EAChB,sGAAsG;YAC1G,qBAAqB,EAAE,mBAAmB;YAC1C,mBAAmB,EAAE,KAAc;YACnC,SAAS,EAAE,IAAI;YACf,qBAAqB,EAAE,iCAAgB;YACvC,gBAAgB,EAAE,iCAAgB;YAClC,wBAAwB,EAAE,iCAAgB;YAC1C,UAAU,EAAE,MAAM,CAAC,UAAU;SAChC,CAAC;IACN,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,OAA0B;QACtC,OAAO;YACH,MAAM,EAAE,YAAU;YAClB,SAAS,EAAE;gBACP,EAAE,OAAO,EAAE,6BAAY,EAAE,QAAQ,EAAE,OAAO,IAAI,EAAE,EAAE;gBAClD,0BAAW;aACd;SACJ,CAAC;IACN,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,OAA+B;QAChD,OAAO;YACH,MAAM,EAAE,YAAU;YAClB,OAAO,EAAE,OAAO,CAAC,OAAO,IAAI,EAAE;YAC9B,SAAS,EAAE,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;SAChD,CAAC;IACN,CAAC;IAEO,MAAM,CAAC,oBAAoB,CAC/B,OAA+B;QAE/B,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,UAAU,EAAE;YAC3C,OAAO,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC,CAAC;SACrD;QAED,OAAO;YACH,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC;YACxC;gBACI,OAAO,EAAE,OAAO,CAAC,QAAoC;gBACrD,QAAQ,EAAE,OAAO,CAAC,QAAoC;aACzD;SACJ,CAAC;IACN,CAAC;IAEO,MAAM,CAAC,0BAA0B,CACrC,OAA+B;QAE/B,IAAI,OAAO,CAAC,UAAU,EAAE;YACpB,OAAO;gBACH,OAAO,EAAE,6BAAY;gBACrB,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,EAAE;aAC/B,CAAC;SACL;QAED,OAAO;YACH,OAAO,EAAE,6BAAY;YACrB,UAAU,EAAE,KAAK,EAAE,cAAkC,EAAE,EAAE,CACrD,cAAc,CAAC,iBAAiB,EAAE;YACtC,MAAM,EAAE;gBACH,OAAO,CAAC,WAAwC;oBAC5C,OAAO,CAAC,QAAqC;aACrD;SACJ,CAAC;IACN,CAAC;CACJ,CAAA;AA5FY,UAAU;IANtB,IAAA,eAAM,GAAE;IACR,IAAA,eAAM,EAAC;QACJ,OAAO,EAAE,EAAE;QACX,SAAS,EAAE,CAAC,0BAAW,CAAC;QACxB,OAAO,EAAE,CAAC,0BAAW,CAAC;KACzB,CAAC;GACW,UAAU,CA4FtB;AA5FY,gCAAU","sourcesContent":["//#region Imports NPM\r\nimport { DynamicModule, Module, Provider, Type, Global } from '@nestjs/common';\r\n//#endregion\r\n//#region Imports Local\r\nimport { LdapService } from './ldap.service';\r\nimport {\r\n    LDAP_OPTIONS,\r\n    LdapModuleOptions,\r\n    LdapModuleAsyncOptions,\r\n    LdapOptionsFactory,\r\n    LdapDomainsConfig,\r\n    ldapADattributes,\r\n    Scope,\r\n} from './ldap.interface';\r\n//#endregion\r\n\r\n@Global()\r\n@Module({\r\n    imports: [],\r\n    providers: [LdapService],\r\n    exports: [LdapService],\r\n})\r\nexport class LdapModule {\r\n    static createDomainConfig(config: {\r\n        name: string,\r\n        url: string,\r\n        bindDN: string,\r\n        bindCredentials: string,\r\n        baseDN: string,\r\n        tlsOptions?: Object | undefined,\r\n    }): LdapDomainsConfig {\r\n        return {\r\n            name: config.name,\r\n            url: config.url,\r\n            bindDN: config.bindDN,\r\n            bindCredentials: config.bindCredentials,\r\n            searchBase: config.baseDN,\r\n            newObject: config.baseDN,\r\n            searchFilter:\r\n                '(&(&(|(&(objectClass=user)(objectCategory=person))(&(objectClass=contact)(objectCategory=person)))))',\r\n            searchScope: 'sub' as Scope,\r\n            groupSearchBase: config.baseDN,\r\n            groupSearchFilter:\r\n                '(&(objectClass=group)(member={{dn}}))',\r\n            groupSearchScope: 'sub' as Scope,\r\n            groupDnProperty: 'dn',\r\n            hideSynchronization: false,\r\n            searchFilterAllUsers:\r\n                '(&(&(|(&(objectClass=user)(objectCategory=person))(&(objectClass=contact)(objectCategory=person)))))',\r\n            searchFilterAllGroups: 'objectClass=group',\r\n            searchScopeAllUsers: 'sub' as Scope,\r\n            reconnect: true,\r\n            groupSearchAttributes: ldapADattributes,\r\n            searchAttributes: ldapADattributes,\r\n            searchAttributesAllUsers: ldapADattributes,\r\n            tlsOptions: config.tlsOptions,\r\n        };\r\n    }\r\n\r\n    static register(options: LdapModuleOptions): DynamicModule {\r\n        return {\r\n            module: LdapModule,\r\n            providers: [\r\n                { provide: LDAP_OPTIONS, useValue: options || {} },\r\n                LdapService,\r\n            ],\r\n        };\r\n    }\r\n\r\n    static registerAsync(options: LdapModuleAsyncOptions): DynamicModule {\r\n        return {\r\n            module: LdapModule,\r\n            imports: options.imports || [],\r\n            providers: this.createAsyncProviders(options),\r\n        };\r\n    }\r\n\r\n    private static createAsyncProviders(\r\n        options: LdapModuleAsyncOptions,\r\n    ): Provider[] {\r\n        if (options.useExisting || options.useFactory) {\r\n            return [this.createAsyncOptionsProvider(options)];\r\n        }\r\n\r\n        return [\r\n            this.createAsyncOptionsProvider(options),\r\n            {\r\n                provide: options.useClass as Type<LdapOptionsFactory>,\r\n                useClass: options.useClass as Type<LdapOptionsFactory>,\r\n            },\r\n        ];\r\n    }\r\n\r\n    private static createAsyncOptionsProvider(\r\n        options: LdapModuleAsyncOptions,\r\n    ): Provider {\r\n        if (options.useFactory) {\r\n            return {\r\n                provide: LDAP_OPTIONS,\r\n                useFactory: options.useFactory,\r\n                inject: options.inject || [],\r\n            };\r\n        }\r\n\r\n        return {\r\n            provide: LDAP_OPTIONS,\r\n            useFactory: async (optionsFactory: LdapOptionsFactory) =>\r\n                optionsFactory.createLdapOptions(),\r\n            inject: [\r\n                (options.useExisting as Type<LdapOptionsFactory>) ||\r\n                    (options.useClass as Type<LdapOptionsFactory>),\r\n            ],\r\n        };\r\n    }\r\n}\r\n"]}