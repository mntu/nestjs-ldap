{"version":3,"file":"change.js","sourceRoot":"","sources":["../../lib/ldap/change.ts"],"names":[],"mappings":"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","sourcesContent":["import { BerWriter, BerReader } from 'asn1';\r\nimport { Attribute } from './attribute';\r\n\r\nexport class Change {\r\n    private _modification: Attribute;\r\n    private _operation?: number;\r\n\r\n    get operation(): 'add' | 'delete' | 'replace' {\r\n        switch (this._operation) {\r\n            case 0x00:\r\n                return 'add';\r\n            case 0x01:\r\n                return 'delete';\r\n            case 0x02:\r\n                return 'replace';\r\n            default:\r\n                throw new Error(\r\n                    `0x${this._operation?.toString(16)} is invalid`,\r\n                );\r\n        }\r\n    }\r\n\r\n    set operation(value: 'add' | 'delete' | 'replace') {\r\n        switch (value) {\r\n            case 'add':\r\n                this._operation = 0x00;\r\n                break;\r\n            case 'delete':\r\n                this._operation = 0x01;\r\n                break;\r\n            case 'replace':\r\n                this._operation = 0x02;\r\n                break;\r\n            default:\r\n                throw new Error(\r\n                    `Invalid operation type: 0x${Number(value).toString(16)}`,\r\n                );\r\n        }\r\n    }\r\n\r\n    get modification(): Attribute | Record<string, any> {\r\n        return this._modification;\r\n    }\r\n\r\n    set modification(value: Attribute | Record<string, any>) {\r\n        if (Attribute.isAttribute(value)) {\r\n            this._modification = value;\r\n            return;\r\n        }\r\n\r\n        // Does it have an attribute-like structure\r\n        if (\r\n            Object.keys(value).length === 2 &&\r\n            typeof value.type === 'string' &&\r\n            Array.isArray(value.vals)\r\n        ) {\r\n            this._modification = new Attribute({\r\n                type: value.type,\r\n                vals: value.vals,\r\n            });\r\n            return;\r\n        }\r\n\r\n        const keys = Object.keys(value);\r\n        if (keys.length > 1) {\r\n            throw new Error('Only one attribute per Change allowed');\r\n        } else if (keys.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const k = keys[0];\r\n        const _attribute = new Attribute({ type: k });\r\n        if (Array.isArray(value[k])) {\r\n            value[k].forEach((v: string | Buffer): void => {\r\n                _attribute.addValue(v);\r\n            });\r\n        } else if (Buffer.isBuffer(value[k])) {\r\n            _attribute.addValue(value[k]);\r\n        } else if (value[k] !== undefined && value[k] !== null) {\r\n            _attribute.addValue(value[k]);\r\n        }\r\n        this._modification = _attribute;\r\n    }\r\n\r\n    constructor(options: Record<string, any> = { operation: 'add' }) {\r\n        this._modification = new Attribute();\r\n        this.operation = options.operation || options.type || 'add';\r\n        this.modification = options.modification || {};\r\n    }\r\n\r\n    isChange = (change: Change | Record<string, any>): boolean => {\r\n        if (!change || typeof change !== 'object') {\r\n            return false;\r\n        }\r\n\r\n        if (\r\n            change instanceof Change ||\r\n            (typeof change.toBer === 'function' &&\r\n                change.modification !== undefined &&\r\n                change.operation !== undefined)\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    compare = (\r\n        a: Change | Record<string, any>,\r\n        b: Change | Record<string, any>,\r\n    ): number => {\r\n        if (!this.isChange(a) || !this.isChange(b)) {\r\n            throw new TypeError('can only compare Changes');\r\n        }\r\n\r\n        if (a.operation < b.operation) return -1;\r\n        if (a.operation > b.operation) return 1;\r\n\r\n        return Attribute.compare(a.modification, b.modification);\r\n    };\r\n\r\n    /**\r\n     * Apply a Change to properties of an object.\r\n     *\r\n     * @param {Object} change the change to apply.\r\n     * @param {Object} obj the object to apply it to.\r\n     * @param {Boolean} scalar convert single-item arrays to scalars. Default: false\r\n     */\r\n    apply = (\r\n        change: Record<string, any> = {\r\n            operation: 'add',\r\n            modification: { type: '' },\r\n        },\r\n        object: Record<string, any>,\r\n        scalar: any,\r\n    ): any => {\r\n        const { type } = change.modification;\r\n        const { vals } = change.modification;\r\n        let data = object[type];\r\n        if (data !== undefined) {\r\n            if (!Array.isArray(data)) {\r\n                data = [data];\r\n            }\r\n        } else {\r\n            data = [];\r\n        }\r\n        switch (change.operation) {\r\n            case 'replace':\r\n                if (vals.length === 0) {\r\n                    // replace empty is a delete\r\n                    delete object[type];\r\n                    return object;\r\n                }\r\n                data = vals;\r\n\r\n                break;\r\n            case 'add': {\r\n                // add only new unique entries\r\n                const newValues = vals.filter(\r\n                    (entry: any) => !data.includes(entry),\r\n                );\r\n                data = data.concat(newValues);\r\n                break;\r\n            }\r\n            case 'delete':\r\n                data = data.filter((entry: any) => !vals.includes(entry));\r\n                if (data.length === 0) {\r\n                    // Erase the attribute if empty\r\n                    delete object[type];\r\n                    return object;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (scalar && data.length === 1) {\r\n            // store single-value outputs as scalars, if requested\r\n            // eslint-disable-next-line prefer-destructuring\r\n            object[type] = data[0];\r\n        } else {\r\n            object[type] = data;\r\n        }\r\n        return object;\r\n    };\r\n\r\n    parse = (ber?: BerReader): boolean => {\r\n        if (!ber) {\r\n            return false;\r\n        }\r\n\r\n        ber.readSequence();\r\n        this._operation = ber.readEnumeration();\r\n        this._modification = new Attribute();\r\n        this._modification.parse(ber);\r\n\r\n        return true;\r\n    };\r\n\r\n    toBer = (ber?: BerWriter): BerWriter => {\r\n        if (!ber) {\r\n            throw new TypeError('ldapjs Change toBer: ber is undefined');\r\n        }\r\n\r\n        ber.startSequence();\r\n        ber.writeEnumeration(this._operation || 0x00);\r\n\r\n        ber = this._modification?.toBer(ber);\r\n        ber.endSequence();\r\n\r\n        return ber;\r\n    };\r\n\r\n    json = (): Record<string, any> => ({\r\n        operation: this.operation,\r\n        modification: this._modification ? this._modification.json : {},\r\n    });\r\n}\r\n"]}