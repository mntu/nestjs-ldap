{"version":3,"file":"attribute.js","sourceRoot":"","sources":["../../lib/ldap/attribute.ts"],"names":[],"mappings":"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","sourcesContent":["import { Ber, BerWriter, BerReader } from 'asn1';\r\nimport { Protocol } from './protocol';\r\n\r\nexport class Attribute {\r\n    public _vals?: Record<string, any>;\r\n    public type: string;\r\n\r\n    /**\r\n     * Get vals\r\n     *\r\n     * @returns {string | Buffer}\r\n     */\r\n    get vals(): string | Buffer {\r\n        return this._vals?.map((v: any) =>\r\n            v.toString(this.bufferEncoding(this.type)),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set vals\r\n     *\r\n     * @param {string | Buffer} vals\r\n     */\r\n    set vals(vals: string | Buffer) {\r\n        this._vals = [];\r\n        if (Array.isArray(vals)) {\r\n            vals.forEach((v) => {\r\n                this.addValue(v);\r\n            });\r\n        } else {\r\n            this.addValue(vals);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get buffers\r\n     *\r\n     * @returns {Record<any, any>} buffers\r\n     */\r\n    get buffers(): Record<any, any> {\r\n        return this._vals || {};\r\n    }\r\n\r\n    /**\r\n     * Get json\r\n     *\r\n     * @returns {Record<string, any>} { type, vals }\r\n     */\r\n    get json(): Record<string, any> {\r\n        return {\r\n            type: this.type,\r\n            vals: this.vals,\r\n        };\r\n    }\r\n\r\n    constructor(options: Record<string, any> = { type: '' }) {\r\n        if (options.type && typeof options.type !== 'string') {\r\n            throw new TypeError('options.type must be a string');\r\n        }\r\n\r\n        this.type = options.type || '';\r\n\r\n        if (options.vals !== undefined && options.vals !== null) {\r\n            this.vals = options.vals;\r\n        }\r\n    }\r\n\r\n    bufferEncoding = (type: string): 'base64' | 'utf8' =>\r\n        /;binary$/.test(type) ? 'base64' : 'utf8';\r\n\r\n    addValue = (val: Buffer | string): void => {\r\n        if (Buffer.isBuffer(val)) {\r\n            this._vals?.push(val);\r\n        } else {\r\n            this._vals?.push(Buffer.from(val, this.bufferEncoding(this.type)));\r\n        }\r\n    };\r\n\r\n    static isAttribute = (\r\n        attr: Attribute | Record<string, unknown>,\r\n    ): attr is Attribute => {\r\n        if (attr instanceof Attribute) {\r\n            return true;\r\n        }\r\n\r\n        if (\r\n            typeof attr.toBer === 'function' &&\r\n            typeof attr.type === 'string' &&\r\n            Array.isArray(attr.vals) &&\r\n            attr.vals.filter(\r\n                (item) => typeof item === 'string' || Buffer.isBuffer(item),\r\n            ).length === attr.vals.length\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    static compare = (\r\n        a: Attribute | Record<string, any>,\r\n        b: Attribute | Record<string, any>,\r\n    ): number => {\r\n        if (!Attribute.isAttribute(a) || !Attribute.isAttribute(b)) {\r\n            throw new TypeError('can only compare Attributes');\r\n        }\r\n\r\n        if (a.type < b.type) return -1;\r\n        if (a.type > b.type) return 1;\r\n        if (a.vals.length < b.vals.length) return -1;\r\n        if (a.vals.length > b.vals.length) return 1;\r\n\r\n        for (let i = 0; i < a.vals.length; i += 1) {\r\n            if (a.vals[i] < b.vals[i]) return -1;\r\n            if (a.vals[i] > b.vals[i]) return 1;\r\n        }\r\n\r\n        return 0;\r\n    };\r\n\r\n    parse = (ber?: BerReader): boolean => {\r\n        if (!ber) {\r\n            throw new TypeError('ldapjs Attribute parse: ber is undefined');\r\n        }\r\n\r\n        ber.readSequence();\r\n        this.type = ber.readString();\r\n\r\n        if (ber.peek() === Protocol.LBER_SET) {\r\n            if (ber.readSequence(Protocol.LBER_SET)) {\r\n                const end = ber.offset + ber.length;\r\n                while (ber.offset < end)\r\n                    this._vals?.push(ber.readString(Ber.OctetString, true));\r\n            }\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    toString = (): string => JSON.stringify(this.json);\r\n\r\n    toBer = (ber?: BerWriter): BerWriter => {\r\n        if (!ber) {\r\n            throw new TypeError('ldapjs Attribute toBer: ber is undefined');\r\n        }\r\n\r\n        ber.startSequence();\r\n        ber.writeString(this.type);\r\n        ber.startSequence(Protocol.LBER_SET);\r\n        if (this._vals?.length) {\r\n            this._vals.forEach((b: any) => {\r\n                ber.writeByte(Ber.OctetString);\r\n                ber.writeLength(b.length);\r\n                for (let i = 0; i < b.length; i += 1) ber.writeByte(b[i]);\r\n            });\r\n        } else {\r\n            ber.writeStringArray([]);\r\n        }\r\n        ber.endSequence();\r\n        ber.endSequence();\r\n\r\n        return ber;\r\n    };\r\n}\r\n"]}